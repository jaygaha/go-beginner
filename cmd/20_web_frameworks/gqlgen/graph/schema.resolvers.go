package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"math/rand"
	"time"

	"github.com/jaygaha/go-beginner/cmd/20_web_frameworks/gqlgen/graph/model"
)

// AddBook is the resolver for the addBook field.
// Creates a new book with a random ID and adds it to the in-memory list.
func (r *mutationResolver) AddBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	// Create a new random source with current time
	rng := rand.New(rand.NewSource(time.Now().UnixNano()))

	book := &model.Book{
		ID:        fmt.Sprintf("B%d", rng.Intn(1000)),
		Title:     input.Title,
		Author:    input.Author,
		Published: true,
	}
	r.books = append(r.books, book)

	return book, nil
}

// Books is the resolver for the books field.
// Returns all books.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	return r.books, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
